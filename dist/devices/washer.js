"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const device_1 = require("../core/device");
const utils_1 = require("../utils");
/**
 * The state of the washer device.
 */
var WasherState;
(function (WasherState) {
    WasherState["ADD_DRAIN"] = "@WM_STATE_ADD_DRAIN_W";
    WasherState["COMPLETE"] = "@WM_STATE_COMPLETE_W";
    WasherState["DETECTING"] = "@WM_STATE_DETECTING_W";
    WasherState["DETERGENT_AMOUNT"] = "@WM_STATE_DETERGENT_AMOUNT_W";
    WasherState["DRYING"] = "@WM_STATE_DRYING_W";
    WasherState["END"] = "@WM_STATE_END_W";
    WasherState["ERROR_AUTO_OFF"] = "@WM_STATE_ERROR_AUTO_OFF_W";
    WasherState["FRESH_CARE"] = "@WM_STATE_FRESHCARE_W";
    WasherState["FROZEN_PREVENT_INITIAL"] = "@WM_STATE_FROZEN_PREVENT_INITIAL_W";
    WasherState["FROZEN_PREVENT_PAUSE"] = "@WM_STATE_FROZEN_PREVENT_PAUSE_W";
    WasherState["FROZEN_PREVENT_RUNNING"] = "@WM_STATE_FROZEN_PREVENT_RUNNING_W";
    WasherState["INITIAL"] = "@WM_STATE_INITIAL_W";
    WasherState["OFF"] = "@WM_STATE_POWER_OFF_W";
    WasherState["PAUSE"] = "@WM_STATE_PAUSE_W";
    WasherState["PRE_WASH"] = "@WM_STATE_PREWASH_W";
    WasherState["RESERVE"] = "@WM_STATE_RESERVE_W";
    WasherState["RINSING"] = "@WM_STATE_RINSING_W";
    WasherState["RINSE_HOLD"] = "@WM_STATE_RINSE_HOLD_W";
    WasherState["RUNNING"] = "@WM_STATE_RUNNING_W";
    WasherState["SMART_DIAGNOSIS"] = "@WM_STATE_SMART_DIAG_W";
    WasherState["SMART_DIAGNOSIS_DATA"] = "@WM_STATE_SMART_DIAGDATA_W";
    WasherState["SPINNING"] = "@WM_STATE_SPINNING_W";
    WasherState["TCL_ALARM_NORMAL"] = "TCL_ALARM_NORMAL";
    WasherState["TUBCLEAN_COUNT_ALARM"] = "@WM_STATE_TUBCLEAN_COUNT_ALRAM_W";
})(WasherState = exports.WasherState || (exports.WasherState = {}));
class WasherDevice extends device_1.Device {
    poll() {
        return __awaiter(this, void 0, void 0, function* () {
            if (!this.monitor) {
                return null;
            }
            const resp = yield this.monitor.poll();
            if (resp) {
                const data = this.model.decodeMonitor(resp);
                return new WasherStatus(this, data);
            }
            return null;
        });
    }
    setOn(isOn) {
        return __awaiter(this, void 0, void 0, function* () {
            const value = isOn ? 'On' : 'Off';
            yield this.setControl('Power', value);
        });
    }
}
exports.WasherDevice = WasherDevice;
class WasherStatus {
    constructor(device, data) {
        this.device = device;
        this.data = data;
    }
    get state() {
        const key = utils_1.lookupEnum('State', this.data, this.device);
        return utils_1.asEnum(WasherState, key);
    }
    get stateText() {
        return utils_1.lookupEnumLang('State', this.data, this.device);
    }
    get previousState() {
        const key = utils_1.lookupEnum('PreState', this.data, this.device);
        return utils_1.asEnum(WasherState, key);
    }
    get previousStateText() {
        return utils_1.lookupEnumLang('PreState', this.data, this.device);
    }
    get isOn() {
        return this.state !== WasherState.OFF;
    }
    get isRemoteStart() {
        const key = utils_1.lookupEnum('RemoteStart', this.data, this.device);
        return utils_1.asEnum(device_1.OnOffEnum, key) === device_1.OnOffEnum.ON;
    }
    get isChildLock() {
        const key = utils_1.lookupEnum('ChildLock', this.data, this.device);
        return utils_1.asEnum(device_1.OnOffEnum, key) === device_1.OnOffEnum.ON;
    }
    get remainingTime() {
        return utils_1.asTime('Remain_Time_H', 'Remain_Time_M', this.data);
    }
    get initialTime() {
        return utils_1.asTime('Initial_Time_H', 'Initial_Time_M', this.data);
    }
    get reserveTime() {
        return utils_1.asTime('Reserve_Time_H', 'Reserve_Time_M', this.data);
    }
    get course() {
        const value = utils_1.lookupReference('Course', this.data, this.device);
        return value;
    }
    get smartCourse() {
        const value = utils_1.lookupReference('SmartCourse', this.data, this.device);
        return value;
    }
    get error() {
        const value = utils_1.lookupReference('Error', this.data, this.device);
        return value;
    }
}
exports.WasherStatus = WasherStatus;
//# sourceMappingURL=data:application/json;base64,