"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const device_1 = require("../core/device");
const utils_1 = require("../utils");
/**
 * The state of the dryer device.
 */
var DryerState;
(function (DryerState) {
    DryerState["COOLING"] = "@WM_STATE_COOLING_W";
    DryerState["END"] = "@WM_STATE_END_W";
    DryerState["ERROR"] = "@WM_STATE_ERROR_W";
    DryerState["DRYING"] = "@WM_STATE_DRYING_W";
    DryerState["INITIAL"] = "@WM_STATE_INITIAL_W";
    DryerState["OFF"] = "@WM_STATE_POWER_OFF_W";
    DryerState["PAUSE"] = "@WM_STATE_PAUSE_W";
    DryerState["RUNNING"] = "@WM_STATE_RUNNING_W";
    DryerState["SMART_DIAGNOSIS"] = "@WM_STATE_SMART_DIAGNOSIS_W";
    DryerState["WRINKLE_CARE"] = "@WM_STATE_WRINKLECARE_W";
})(DryerState = exports.DryerState || (exports.DryerState = {}));
/**
 * Represents the dry level setting of the dryer.
 */
var DryLevel;
(function (DryLevel) {
    DryLevel["CUPBOARD"] = "@WM_DRY27_DRY_LEVEL_CUPBOARD_W";
    DryLevel["DAMP"] = "@WM_DRY27_DRY_LEVEL_DAMP_W";
    DryLevel["EXTRA"] = "@WM_DRY27_DRY_LEVEL_EXTRA_W";
    DryLevel["IRON"] = "@WM_DRY27_DRY_LEVEL_IRON_W";
    DryLevel["LESS"] = "@WM_DRY27_DRY_LEVEL_LESS_W";
    DryLevel["MORE"] = "@WM_DRY27_DRY_LEVEL_MORE_W";
    DryLevel["NORMAL"] = "@WM_DRY27_DRY_LEVEL_NORMAL_W";
    DryLevel["OFF"] = "-";
    DryLevel["VERY"] = "@WM_DRY27_DRY_LEVEL_VERY_W";
})(DryLevel = exports.DryLevel || (exports.DryLevel = {}));
/**
 * A dryer error.
 */
var DryerError;
(function (DryerError) {
    DryerError["ERROR_AE"] = "@WM_US_DRYER_ERROR_AE_W";
    DryerError["ERROR_CE1"] = "@WM_US_DRYER_ERROR_CE1_W";
    DryerError["ERROR_DE4"] = "@WM_WW_FL_ERROR_DE4_W";
    DryerError["ERROR_DOOR"] = "@WM_US_DRYER_ERROR_DE_W";
    DryerError["ERROR_DRAINMOTOR"] = "@WM_US_DRYER_ERROR_OE_W";
    DryerError["ERROR_EMPTYWATER"] = "@WM_US_DRYER_ERROR_EMPTYWATER_W";
    DryerError["ERROR_F1"] = "@WM_US_DRYER_ERROR_F1_W";
    DryerError["ERROR_LE1"] = "@WM_US_DRYER_ERROR_LE1_W";
    DryerError["ERROR_LE2"] = "@WM_US_DRYER_ERROR_LE2_W";
    DryerError["ERROR_NOFILTER"] = "@WM_US_DRYER_ERROR_NOFILTER_W";
    DryerError["ERROR_NP"] = "@WM_US_DRYER_ERROR_NP_GAS_W";
    DryerError["ERROR_PS"] = "@WM_US_DRYER_ERROR_PS_W";
    DryerError["ERROR_TE1"] = "@WM_US_DRYER_ERROR_TE1_W";
    DryerError["ERROR_TE2"] = "@WM_US_DRYER_ERROR_TE2_W";
    DryerError["ERROR_TE5"] = "@WM_US_DRYER_ERROR_TE5_W";
    DryerError["ERROR_TE6"] = "@WM_US_DRYER_ERROR_TE6_W";
})(DryerError = exports.DryerError || (exports.DryerError = {}));
/**
 * Represents temperature control setting.
 */
var TempControl;
(function (TempControl) {
    TempControl["OFF"] = "-";
    TempControl["ULTRA_LOW"] = "@WM_DRY27_TEMP_ULTRA_LOW_W";
    TempControl["LOW"] = "@WM_DRY27_TEMP_LOW_W";
    TempControl["MEDIUM"] = "@WM_DRY27_TEMP_MEDIUM_W";
    TempControl["MID_HIGH"] = "@WM_DRY27_TEMP_MID_HIGH_W";
    TempControl["HIGH"] = "@WM_DRY27_TEMP_HIGH_W";
})(TempControl = exports.TempControl || (exports.TempControl = {}));
/**
 * Represents a timed dry setting.
 */
var TimeDry;
(function (TimeDry) {
    TimeDry["OFF"] = "-";
    TimeDry["TWENTY"] = "20";
    TimeDry["THIRTY"] = "30";
    TimeDry["FOURTY"] = "40";
    TimeDry["FIFTY"] = "50";
    TimeDry["SIXTY"] = "60";
})(TimeDry = exports.TimeDry || (exports.TimeDry = {}));
class DryerDevice extends device_1.Device {
    poll() {
        return __awaiter(this, void 0, void 0, function* () {
            if (!this.monitor) {
                return null;
            }
            const resp = yield this.monitor.poll();
            if (resp) {
                const data = this.model.decodeMonitor(resp);
                return new DryerStatus(this, data);
            }
            return null;
        });
    }
}
exports.DryerDevice = DryerDevice;
class DryerStatus {
    constructor(device, data) {
        this.device = device;
        this.data = data;
    }
    get state() {
        const key = utils_1.lookupEnum('State', this.data, this.device);
        return utils_1.asEnum(DryerState, key);
    }
    get previousState() {
        const key = utils_1.lookupEnum('PreState', this.data, this.device);
        return utils_1.asEnum(DryerState, key);
    }
    get dryLevel() {
        const key = utils_1.lookupEnum('DryLevel', this.data, this.device);
        return utils_1.asEnum(DryLevel, key);
    }
    get temperatureControl() {
        const key = utils_1.lookupEnum('TempControl', this.data, this.device);
        return utils_1.asEnum(TempControl, key);
    }
    get timeDry() {
        const key = utils_1.lookupEnum('TimeDry', this.data, this.device);
        return utils_1.asEnum(TimeDry, key);
    }
    get isOn() {
        return this.state !== DryerState.OFF;
    }
    get remainingTime() {
        return utils_1.asTime('Remain_Time_H', 'Remain_Time_M', this.data);
    }
    get initialTime() {
        return utils_1.asTime('Initial_Time_H', 'Initial_Time_M', this.data);
    }
    get course() {
        const value = utils_1.lookupReference('Course', this.data, this.device);
        return value;
    }
    get smartCourse() {
        const value = utils_1.lookupReference('SmartCourse', this.data, this.device);
        return value;
    }
    get error() {
        const value = utils_1.lookupReference('Error', this.data, this.device);
        return value;
    }
}
exports.DryerStatus = DryerStatus;
//# sourceMappingURL=data:application/json;base64,