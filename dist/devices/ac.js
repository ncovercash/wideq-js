"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const device_1 = require("../core/device");
const utils_1 = require("../utils");
/**
 * The vertical swing mode for an AC/HVAC device.
 *
 * Blades are numbered vertically from 1 (topmost) to 6.
 * All is 100.
 */
var ACVSwingMode;
(function (ACVSwingMode) {
    ACVSwingMode["OFF"] = "@OFF";
    ACVSwingMode["ONE"] = "@1";
    ACVSwingMode["TWO"] = "@2";
    ACVSwingMode["THREE"] = "@3";
    ACVSwingMode["FOUR"] = "@4";
    ACVSwingMode["FIVE"] = "@5";
    ACVSwingMode["SIX"] = "@6";
    ACVSwingMode["ALL"] = "@100";
})(ACVSwingMode = exports.ACVSwingMode || (exports.ACVSwingMode = {}));
/**
 * The horizontal swing mode for an AC/HVAC device.
 *
 * Blades are numbered horizontally from 1 (leftmost) to 5.
 *
 * Left half goes from 1 - 3, and right half goes from 3 - 5.
 *
 * All is 100.
 */
var ACHSwingMode;
(function (ACHSwingMode) {
    ACHSwingMode["OFF"] = "@OFF";
    ACHSwingMode["ONE"] = "@1";
    ACHSwingMode["TWO"] = "@2";
    ACHSwingMode["THREE"] = "@3";
    ACHSwingMode["FOUR"] = "@4";
    ACHSwingMode["FIVE"] = "@5";
    ACHSwingMode["LEFT_HALF"] = "@13";
    ACHSwingMode["RIGHT_HALF"] = "@35";
    ACHSwingMode["ALL"] = "@100";
})(ACHSwingMode = exports.ACHSwingMode || (exports.ACHSwingMode = {}));
/**
 * The operation mode for an AC/HVAC device.
 */
var ACMode;
(function (ACMode) {
    ACMode["COOL"] = "@AC_MAIN_OPERATION_MODE_COOL_W";
    ACMode["DRY"] = "@AC_MAIN_OPERATION_MODE_DRY_W";
    ACMode["FAN"] = "@AC_MAIN_OPERATION_MODE_FAN_W";
    ACMode["AI"] = "@AC_MAIN_OPERATION_MODE_AI_W";
    ACMode["HEAT"] = "@AC_MAIN_OPERATION_MODE_HEAT_W";
    ACMode["AIRCLEAN"] = "@AC_MAIN_OPERATION_MODE_AIRCLEAN_W";
    ACMode["ACO"] = "@AC_MAIN_OPERATION_MODE_ACO_W";
    ACMode["AROMA"] = "@AC_MAIN_OPERATION_MODE_AROMA_W";
    ACMode["ENERGY_SAVING"] = "@AC_MAIN_OPERATION_MODE_ENERGY_SAVING_W";
    ACMode["ENERGY_SAVER"] = "@AC_MAIN_OPERATION_MODE_ENERGY_SAVER_W";
})(ACMode = exports.ACMode || (exports.ACMode = {}));
/**
 * The fan speed for an AC/HVAC device.
 */
var ACFanSpeed;
(function (ACFanSpeed) {
    ACFanSpeed["SLOW"] = "@AC_MAIN_WIND_STRENGTH_SLOW_W";
    ACFanSpeed["SLOW_LOW"] = "@AC_MAIN_WIND_STRENGTH_SLOW_LOW_W";
    ACFanSpeed["LOW"] = "@AC_MAIN_WIND_STRENGTH_LOW_W";
    ACFanSpeed["LOW_MID"] = "@AC_MAIN_WIND_STRENGTH_LOW_MID_W";
    ACFanSpeed["MID"] = "@AC_MAIN_WIND_STRENGTH_MID_W";
    ACFanSpeed["MID_HIGH"] = "@AC_MAIN_WIND_STRENGTH_MID_HIGH_W";
    ACFanSpeed["HIGH"] = "@AC_MAIN_WIND_STRENGTH_HIGH_W";
    ACFanSpeed["POWER"] = "@AC_MAIN_WIND_STRENGTH_POWER_W";
    ACFanSpeed["AUTO"] = "@AC_MAIN_WIND_STRENGTH_AUTO_W";
})(ACFanSpeed = exports.ACFanSpeed || (exports.ACFanSpeed = {}));
/**
 * Whether a device is on or off.
 */
var ACOperation;
(function (ACOperation) {
    ACOperation["OFF"] = "@AC_MAIN_OPERATION_OFF_W";
    /** This one seems to mean "on" ? */
    ACOperation["RIGHT_ON"] = "@AC_MAIN_OPERATION_RIGHT_ON_W";
    ACOperation["LEFT_ON"] = "@AC_MAIN_OPERATION_LEFT_ON_W";
    ACOperation["ALL_ON"] = "@AC_MAIN_OPERATION_ALL_ON_W";
})(ACOperation = exports.ACOperation || (exports.ACOperation = {}));
class ACDevice extends device_1.Device {
    get f2c() {
        const mapping = this.model.value('TempFahToCel');
        if (mapping) {
            if (mapping.type === 'Enum') {
                return Object.entries(mapping.options).reduce((obj, [f, c]) => (Object.assign({}, obj, { [Number(f)]: c })), {});
            }
        }
        return {};
    }
    get c2f() {
        const mapping = this.model.value('TempCelToFah');
        const out = {};
        if (mapping) {
            if (mapping.type === 'Enum') {
                return Object.entries(mapping.options).reduce((obj, [f, c]) => (Object.assign({}, obj, { [Number(f)]: c })), {});
            }
        }
        return out;
    }
    setCelsius(c) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.setControl('TempCfg', c);
        });
    }
    setFahrenheit(f) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.setCelsius(this.f2c[f]);
        });
    }
    /**
     * Turn off or on the device's zones.
     *
     * The `zones` parameter is a list of dicts with these keys:
     * - "No": The zone index. A string containing a number,
     *   starting from 1.
     * - "Cfg": Whether the zone is enabled. A string, either "1" or
     *   "0".
     * - "State": Whether the zone is open. Also "1" or "0".
     */
    setZones(zones) {
        return __awaiter(this, void 0, void 0, function* () {
            const onCount = zones.reduce((accum, zone) => accum + Number(zone), 0);
            if (onCount > 0) {
                const zoneCmd = zones.filter((zone) => zone.Cfg === '1').map((zone) => `${zone.No}_${zone.State}`).join('/');
                yield this.setControl('DuctZone', zoneCmd);
            }
        });
    }
    getZones() {
        return __awaiter(this, void 0, void 0, function* () {
            return this.getConfig('DuctZone');
        });
    }
    setFanSpeed(speed) {
        return __awaiter(this, void 0, void 0, function* () {
            const speedValue = this.model.enumValue('WindStrength', speed);
            yield this.setControl('WindStrength', speedValue);
        });
    }
    setHorizontalSwing(swing) {
        return __awaiter(this, void 0, void 0, function* () {
            const swingValue = this.model.enumValue('WDirHStep', swing);
            yield this.setControl('WDirHStep', swingValue);
        });
    }
    setVerticalSwing(swing) {
        return __awaiter(this, void 0, void 0, function* () {
            const swingValue = this.model.enumValue('WDirVStep', swing);
            yield this.setControl('WDirVStep', swingValue);
        });
    }
    setMode(mode) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.setControl('OpMode', mode);
        });
    }
    setOn(isOn) {
        return __awaiter(this, void 0, void 0, function* () {
            const op = isOn ? ACOperation.RIGHT_ON : ACOperation.OFF;
            const opValue = this.model.enumValue('OpMode', op);
            yield this.setControl('OpMode', opValue);
        });
    }
    getFilterState() {
        return __awaiter(this, void 0, void 0, function* () {
            return this.getConfig('Filter');
        });
    }
    getMFilterState() {
        return __awaiter(this, void 0, void 0, function* () {
            return this.getConfig('MFilter');
        });
    }
    getEnergyTarget() {
        return __awaiter(this, void 0, void 0, function* () {
            return this.getConfig('EnergyDesiredValue');
        });
    }
    getLight() {
        return __awaiter(this, void 0, void 0, function* () {
            const value = yield this.getControl('DisplayControl');
            return value === '0';
        });
    }
    getVolume() {
        return __awaiter(this, void 0, void 0, function* () {
            const value = this.getControl('SpkVolume');
            return Number(value);
        });
    }
    poll() {
        return __awaiter(this, void 0, void 0, function* () {
            if (!this.monitor) {
                return null;
            }
            const resp = yield this.monitor.poll();
            if (resp) {
                const data = this.model.decodeMonitor(resp);
                return new ACStatus(this, data);
            }
            return null;
        });
    }
}
exports.ACDevice = ACDevice;
class ACStatus {
    constructor(device, data) {
        this.device = device;
        this.data = data;
    }
    get currentTempInCelsius() {
        return Number(this.data.TempCur);
    }
    get currentTempInFahrenheit() {
        return Number(this.device.c2f[this.currentTempInCelsius]);
    }
    get targetTempInCelsius() {
        return Number(this.data.TempCfg);
    }
    get targetTempInFahrenheit() {
        return Number(this.device.c2f[this.targetTempInCelsius]);
    }
    get mode() {
        const key = utils_1.lookupEnum('OpMode', this.data, this.device);
        return utils_1.asEnum(ACMode, key);
    }
    get fanSpeed() {
        const key = utils_1.lookupEnum('WindStrength', this.data, this.device);
        return utils_1.asEnum(ACFanSpeed, key);
    }
    get horizontalSwing() {
        const key = utils_1.lookupEnum('WDirHStep', this.data, this.device);
        return utils_1.asEnum(ACHSwingMode, key);
    }
    get verticalSwing() {
        const key = utils_1.lookupEnum('WDirVStep', this.data, this.device);
        return utils_1.asEnum(ACVSwingMode, key);
    }
    get isOn() {
        const key = utils_1.lookupEnum('Operation', this.data, this.device);
        return utils_1.asEnum(ACOperation, key) !== ACOperation.OFF;
    }
}
exports.ACStatus = ACStatus;
//# sourceMappingURL=data:application/json;base64,