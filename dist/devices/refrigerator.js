"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const device_1 = require("../core/device");
const utils_1 = require("../utils");
var FreshAirFilter;
(function (FreshAirFilter) {
    FreshAirFilter["OFF"] = "@CP_TERM_OFF_KO_W";
    FreshAirFilter["AUTO"] = "@RE_STATE_FRESH_AIR_FILTER_MODE_AUTO_W";
    FreshAirFilter["POWER"] = "@RE_STATE_FRESH_AIR_FILTER_MODE_POWER_W";
    FreshAirFilter["REPLACE_FILTER"] = "@RE_STATE_REPLACE_FILTER_W";
    FreshAirFilter["SMARTCARE_RUN"] = "@RE_SMARTCARE_RUN_W";
    FreshAirFilter["SMARTCARE_ON"] = "@RE_STATE_SMART_SMART_CARE_ON";
    FreshAirFilter["SMARTCARE_OFF"] = "@RE_STATE_SMART_SMART_CARE_OFF";
    FreshAirFilter["EMPTY"] = "";
})(FreshAirFilter = exports.FreshAirFilter || (exports.FreshAirFilter = {}));
var SmartSavingMode;
(function (SmartSavingMode) {
    SmartSavingMode["OFF"] = "@CP_TERM_USE_NOT_W";
    SmartSavingMode["NIGHT"] = "@RE_SMARTSAVING_MODE_NIGHT_W";
    SmartSavingMode["CUSTOM"] = "@RE_SMARTSAVING_MODE_CUSTOM_W";
    SmartSavingMode["SMART_GRID_OFF"] = "@CP_OFF_EN_W";
    SmartSavingMode["SMART_GRID_DEMAND_RESPONSE"] = "@RE_TERM_DEMAND_RESPONSE_FUNCTIONALITY_W";
    SmartSavingMode["SMART_GRID_CUSTOM"] = "@RE_TERM_DELAY_DEFROST_CAPABILITY_W";
    SmartSavingMode["EMPTY"] = "";
})(SmartSavingMode = exports.SmartSavingMode || (exports.SmartSavingMode = {}));
var SmartSavingModeStatus;
(function (SmartSavingModeStatus) {
    SmartSavingModeStatus["OFF"] = "OFF";
    SmartSavingModeStatus["ON"] = "ON";
    SmartSavingModeStatus["EMPTY"] = "";
})(SmartSavingModeStatus = exports.SmartSavingModeStatus || (exports.SmartSavingModeStatus = {}));
var LockingStatus;
(function (LockingStatus) {
    LockingStatus["UNLOCK"] = "UNLOCK";
    LockingStatus["LOCK"] = "LOCK";
    LockingStatus["EMPTY"] = "";
})(LockingStatus = exports.LockingStatus || (exports.LockingStatus = {}));
var DoorOpenState;
(function (DoorOpenState) {
    DoorOpenState["OPEN"] = "OPEN";
    DoorOpenState["CLOSE"] = "CLOSE";
    DoorOpenState["EMPTY"] = "";
})(DoorOpenState = exports.DoorOpenState || (exports.DoorOpenState = {}));
var TempUnit;
(function (TempUnit) {
    TempUnit["F"] = "\uFF26";
    TempUnit["C"] = "\u2103";
    TempUnit["EMPTY"] = "";
})(TempUnit = exports.TempUnit || (exports.TempUnit = {}));
class RefrigeratorDevice extends device_1.Device {
    poll() {
        return __awaiter(this, void 0, void 0, function* () {
            if (!this.monitor) {
                return null;
            }
            const resp = yield this.monitor.poll();
            if (resp) {
                const data = this.model.decodeMonitor(resp);
                return new RefrigeratorStatus(this, data);
            }
            return null;
        });
    }
    // binary based, new control method
    setBinaryTempRefrigerator(status, newValue) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.setControlBinary(status, 'TempRefrigerator', newValue);
        });
    }
    setBinaryTempFreezer(status, newValue) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.setControlBinary(status, 'TempFreezer', newValue);
        });
    }
    setBinaryEco(status, newValue) {
        return __awaiter(this, void 0, void 0, function* () {
            const opValue = this.model.enumValue('EcoFriendly', newValue ? device_1.OnOffEnum.ON : device_1.OnOffEnum.OFF);
            yield this.setControlBinary(status, 'EcoFriendly', opValue);
        });
    }
    setBinaryIcePlus(status, newValue) {
        return __awaiter(this, void 0, void 0, function* () {
            const opValue = this.model.enumValue('IcePlus', newValue ? device_1.OnOffEnum.ON : device_1.OnOffEnum.OFF);
            yield this.setControlBinary(status, 'IcePlus', opValue);
        });
    }
    setBinaryFreshAirFilter(status, newValue) {
        return __awaiter(this, void 0, void 0, function* () {
            const opValue = this.model.enumValue('FreshAirFilter', newValue);
            yield this.setControlBinary(status, 'FreshAirFilter', opValue);
        });
    }
    // key based, no prefix for BC
    setTempRefrigeratorC(temp) {
        return __awaiter(this, void 0, void 0, function* () {
            // {
            //   "RETM":"{{TempRefrigerator}}",
            //   "REFT":"{{TempFreezer}}",
            //   "REIP":"{{IcePlus}}",
            //   "REEF":"{{EcoFriendly}}"
            // }
            const opValue = this.model.enumValue('TempRefrigerator', temp.toString());
            yield this.setControl('RETM', opValue);
        });
    }
    setTempFreezerC(temp) {
        return __awaiter(this, void 0, void 0, function* () {
            const opValue = this.model.enumValue('TempFreezer', temp.toString());
            yield this.setControl('REFT', opValue);
        });
    }
    setEcoEnabled(val) {
        return __awaiter(this, void 0, void 0, function* () {
            const opValue = this.model.enumValue('EcoFriendly', val ? device_1.OnOffEnum.ON : device_1.OnOffEnum.OFF);
            yield this.setControl('REEF', opValue);
        });
    }
    setIcePlusStatus(val) {
        return __awaiter(this, void 0, void 0, function* () {
            const opValue = this.model.enumValue('IcePlus', val ? device_1.OnOffEnum.ON : device_1.OnOffEnum.OFF);
            yield this.setControl('REIP', opValue);
        });
    }
}
exports.RefrigeratorDevice = RefrigeratorDevice;
class RefrigeratorStatus {
    constructor(device, data) {
        this.device = device;
        this.data = data;
    }
    get tempRefrigeratorC() {
        const key = utils_1.lookupEnum('TempRefrigerator', this.data, this.device);
        return Number(key);
    }
    get tempFreezerC() {
        const key = utils_1.lookupEnum('TempFreezer', this.data, this.device);
        return Number(key);
    }
    get icePlusStatus() {
        const key = utils_1.lookupEnum('IcePlus', this.data, this.device);
        return utils_1.asEnum(device_1.OnOffEnum, key) === device_1.OnOffEnum.ON;
    }
    get freshAirFilterStatus() {
        const key = utils_1.lookupEnum('FreshAirFilter', this.data, this.device);
        return utils_1.asEnum(FreshAirFilter, key);
    }
    get freshAirFilterStatusText() {
        return utils_1.lookupEnumLang('FreshAirFilter', this.data, this.device);
    }
    get energySavingMode() {
        const key = utils_1.lookupEnum('SmartSavingMode', this.data, this.device);
        return utils_1.asEnum(SmartSavingMode, key);
    }
    get doorOpened() {
        const key = utils_1.lookupEnum('DoorOpenState', this.data, this.device);
        return utils_1.asEnum(DoorOpenState, key) === DoorOpenState.OPEN;
    }
    get tempUnit() {
        const key = utils_1.lookupEnum('TempUnit', this.data, this.device);
        return utils_1.asEnum(TempUnit, key);
    }
    get energySavingEnabled() {
        const key = utils_1.lookupEnum('SmartSavingModeStatus', this.data, this.device);
        return utils_1.asEnum(SmartSavingModeStatus, key) === SmartSavingModeStatus.ON;
    }
    get locked() {
        const key = utils_1.lookupEnum('LockingStatus', this.data, this.device);
        return utils_1.asEnum(LockingStatus, key) === LockingStatus.LOCK;
    }
    get activeSavingStatus() {
        return this.data['ActiveSavingStatus'];
    }
    get ecoEnabled() {
        const value = utils_1.lookupEnum('EcoFriendly', this.data, this.device);
        return utils_1.asEnum(device_1.OnOffEnum, value) === device_1.OnOffEnum.ON;
    }
    get waterFilterUsedMonth() {
        return this.data['WaterFilterUsedMonth'];
    }
}
exports.RefrigeratorStatus = RefrigeratorStatus;
//# sourceMappingURL=data:application/json;base64,