"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const _ = __importStar(require("lodash"));
var ValueType;
(function (ValueType) {
    ValueType["Bit"] = "Bit";
    ValueType["Enum"] = "Enum";
    ValueType["Range"] = "Range";
    ValueType["Reference"] = "Reference";
    ValueType["StringComment"] = "StringComment";
})(ValueType = exports.ValueType || (exports.ValueType = {}));
class ModelInfo {
    constructor(data) {
        this.data = data;
    }
    value(name) {
        const data = this.data.Value[name];
        if (data === undefined) {
            return null;
        }
        switch (data.type.toLowerCase()) {
            case 'enum':
                return {
                    type: ValueType.Enum,
                    options: data.option,
                };
            case 'range':
                return {
                    type: ValueType.Range,
                    min: data.option.min,
                    max: data.option.max,
                    step: _.get(data.option, 'step', 1),
                };
            case 'bit': {
                const bitValues = Object.values(data.option).reduce((obj, value) => (Object.assign({}, obj, { [value.startbit]: value.values })), {});
                return { type: ValueType.Bit, options: bitValues };
            }
            case 'reference': {
                const [ref] = data.option;
                return { type: ValueType.Reference, reference: this.data[ref] };
            }
            case 'string':
                if (typeof data._comment === 'string') {
                    return { type: ValueType.StringComment, comment: data._comment };
                }
                return null;
            default:
                throw new Error(`Unsupported value type: ${data.type}`);
        }
    }
    default(name) {
        return this.data.Value[name].default;
    }
    enumValue(key, name) {
        const options = this.value(key).options;
        // invert them pa
        const optionsInv = _.invert(options);
        return optionsInv[name];
    }
    enumName(key, value) {
        const options = this.value(key).options;
        if (!(value in options)) {
            return null;
        }
        return options[value];
    }
    referenceName(key, value) {
        const val = String(value);
        const reference = this.value(key).reference;
        if (value in reference) {
            return reference[value]._comment;
        }
        return null;
    }
    get binaryMonitorData() {
        return this.data.Monitoring.type === 'BINARY(BYTE)';
    }
    decodeMonitor(data) {
        return this.binaryMonitorData ? this.decodeMonitorBinary(data) : this.decodeMonitorJson(data);
    }
    decodeMonitorBinary(data) {
        const decoded = {};
        for (const item of this.data.Monitoring.protocol) {
            const key = item.value;
            let value = 0;
            for (let i = item.startByte; i < item.startByte + item.length; i++) {
                const v = data[i];
                value = (value << 8) + v;
                decoded[key] = String(value);
            }
        }
        return decoded;
    }
    decodeMonitorJson(data) {
        return JSON.parse(data.toString('utf-8'));
    }
}
exports.ModelInfo = ModelInfo;
//# sourceMappingURL=data:application/json;base64,